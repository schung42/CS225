/**
 * @file kdtree.cpp
 * Implementation of KDTree class.
 */

template<int Dim>
bool KDTree<Dim>::smallerDimVal(const Point<Dim> & first, const Point<Dim> & second, int curDim) const
{
    /**
     * @todo Implement this function!
     */
    if(first[curDim] == second[curDim])
    {
        if(first < second)
        {
            return true;
        }
        else return false;
    }

    else if(first[curDim] < second[curDim])
    {
        return true;
    }
    else return false;
}


template<int Dim>
bool KDTree<Dim>::shouldReplace(const Point<Dim> & target, const Point<Dim> & currentBest, const Point<Dim> & potential) const
{
    /**
     * @todo Implement this function!
     */
    int current = shouldReplaceHelper(currentBest, target);
    int potentialDist = shouldReplaceHelper(potential, target);

    //if the distance between the current closest and potential distance is the same,
    if(current == potentialDist)
    {
        //if the currentBest is not the best point, return true
        if(currentBest > potential)
        {
            return true;
        }
        else return false;
    }
    else if(current < potentialDist)
    {
        return false;
    }
    else return true;
    
}

template<int Dim>
int KDTree<Dim>::shouldReplaceHelper(const Point<Dim> & target1, const Point<Dim> & target2) const
{
    int euclidDistance = 0;

    for(int i = 0; i< Dim; i++)
    {
        euclidDistance = euclidDistance + (target1[i]-target2[i])*(target1[i]-target2[i]);
    }

    return euclidDistance;
}
template<int Dim>
KDTree<Dim>::KDTree(const vector< Point<Dim> > & newPoints)
{
    /**
     * @todo Implement this function!
     */
    points = newPoints;
    if(points.empty())
    {
        return;
    }
    else if(!points.empty())
    {
        createKDTree(0, points.size()-1, 0);
    }

}

template <int Dim>
void KDTree<Dim>::createKDTree(int left, int right, int size)
{
    int median = (left + right)/2;

    if(left == right)
    {
        return;
    }

    choose(left, right, size, median);

    //build the left tree
    if(left < median)
    {
        createKDTree(left, median-1,(size+1)%Dim);
    }
    //right subtree
    if(right>median)
    {
        createKDTree(median+1, right, (size+1)%Dim);
    }
}

template<int Dim>
void KDTree<Dim>::choose(int left, int right, int size, int median)
{
    bool loop = true;

    if(right == left)
    {
        loop = false;
    }

    while(loop)
    {
        int curr = partitionKDTree(left, right, size, median);
        if(median > curr)
        {
            left = curr +1;
        }

        else if(median <curr)
        {
            right = curr -1;
        }
        else return;
    }
}

template<int Dim>
int KDTree<Dim>::partitionKDTree(int left, int right, int size, int median)
{
    int retVal = left;
    Point<Dim> tempTree = points[median];

    swap(median, right);

    while(left<right)
    {
        if(smallerDimVal(points[left], tempTree, size) || points[left] == tempTree)
        {
            swap(left, retVal);
            retVal++;
        }
        left++;
    }
    swap(right, retVal);
    return retVal;
}

template<int Dim>
void KDTree<Dim>::swap(int swap1, int swap2)
{
    Point<Dim> temp = points[swap1];
    points[swap1] = points[swap2];
    points[swap2] = temp;
}

template<int Dim>
Point<Dim> KDTree<Dim>::findNearestNeighbor(const Point<Dim> & query) const
{
    /**
     * @todo Implement this function!
     */

   Point<Dim> retVal;

   retVal = FindNearestNeighborHelp(query,0,0,points.size()-1, points[(points.size()-1)/2]);
   
   return retVal;
}

template<int Dim>
Point<Dim> KDTree<Dim>::FindNearestNeighborHelp(const Point<Dim> & query, int size, int left, int right, const Point<Dim> & halfOrBest) const
{
    Point<Dim> retVal = halfOrBest;
    bool leftDirection = true;
    int median = (left+right)/2;
    int extra;

    if(left == right)
    {
        KDNodeChecker(query, left, halfOrBest, val);
        return val;
    }

    if(smallerDimVal(query, points[median], size)&&median >left)
    {
        retVal = FindNearestNeighborHelp(query, (size+1)%Dim, left, median-1, halfOrBest);
        leftDirection = true;
        extra = (median+right)/2;       
    }

    if(smallerDimVal(points[median], query, size)&& median < right)
    {
        retVal = FindNearestNeighborHelp(query, (size+1)%Dim, median+1, right, halfOrBest);
        leftDirection = false;
        extra = (median+left-1)/2;
    }

    if(shouldReplace(query, val, points[median]))
        retVal = points[median];

    Point<Dim> medianVal = points[median];

    if(shouldReplaceHelper(query, retVal) >= ((medianVal[size] - query[size])*(medianVal[size]-query[size])))
    {
        
    }



}
